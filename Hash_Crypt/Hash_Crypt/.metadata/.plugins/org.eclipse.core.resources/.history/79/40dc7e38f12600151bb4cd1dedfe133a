package ProjectHD;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Collection;

public class Server {
	public static ArrayList<Supporter> supporterList=new ArrayList<>();
	public static  ArrayList<Client> clientList=new ArrayList<>();
	
	
public static void addClient(Client client){
	clientList.add(client);
}

public static void addSupporter(Supporter supporter){
	supporterList.add(supporter);
}

public static void removeClient(Client client){
	clientList.remove(client);
}

public static void removeSupporter(Supporter supporter){
	supporterList.remove(supporter);
}

	
	
	public static void main(String args[]) throws IOException {
		clientList.add(new Client("Haris", "192.168.10.118"));
		ServerSocket serverSocket = new ServerSocket(3000);
		while (true) {
			Thread connectThread = new Thread(new ConnectThread(serverSocket.accept()));
			connectThread.start();
		}
	}
}

class ConnectThread implements Runnable {
	private volatile boolean done = false;
	private ObjectInputStream ois;
	private ObjectOutputStream oos;
	public static Collection<Socket> sockets = new ArrayList<Socket>();
	private Socket connection = null;
	DataInputStream dataIn = null;
	DataOutputStream dataOut = null;
	
	public ConnectThread(Socket socket) throws IOException{
		connection = socket;
		socket.getRemoteSocketAddress().toString();
	    ois = new ObjectInputStream(connection.getInputStream());
	    oos = new ObjectOutputStream(connection.getOutputStream());
	    sockets.add(connection);
	}

	public void start() {
		run();
	}

	public void run() {
		// TODO Auto-generated method stub
		//ONLY IF ATLEAST 1 CLEINT AND SUPPORTER
		while(!connection.isClosed() && !done){
			String clientIpAdress = Server.clientList.get(0).getIpAdress();
			String supporterIpAdress = Server.supporterList.get(0).getIpAdress();
			if ()
			MessageHandler.handleMessage(ois, oos, connection.getRemoteSocketAddress());
			//readMessage();
			try{
				Thread.sleep(100);
			} catch (InterruptedException ex){}
		}
	}
}
